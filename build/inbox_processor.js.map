{"version":3,"sources":["../src/inbox_processor.js"],"names":["moderators","lastChecked","reddit","getInbox","replies","processedReplies","reply","created_utc","createdDate","log","debug","processInboxReply","chalk","blue","messages","processedMessages","message","processInboxMessage","processInbox","inboxReply","isMod","find","moderator","name","author","body","includes","doClear","doExactMatchOnly","report","getComment","id","comment","fetch","sliceSubmissionId","link_id","getSubmission","submission","setExactMatchOnly","success","magicReply","distinguish","clearSubmission","yellow","Date","getImageDetails","imageDetails","permalink","getMagicSubmission","dhash","existingMagicSubmission","JSON","stringify","_id","deleteMagicSubmission","info","exactMatchOnly","saveMagicSubmission","require","config","moment","outdent","setLevel","process","env","LOG_LEVEL","ImageDetails","MagicSubmission","module","exports"],"mappings":";;;;;;;uEAgBA,iBAA4BA,UAA5B,EAAwCC,WAAxC,EAAqDC,MAArD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAC0BA,OAAOC,QAAP,CAAgB,EAAC,UAAU,UAAX,EAAhB,CAD1B;;AAAA;AACUC,+BADV;AAEQC,wCAFR,GAE2B,CAF3B;AAAA;AAAA;AAAA;AAAA;AAAA,oCAGwBD,OAHxB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGeE,6BAHf;AAAA;AAAA,+BAIkCA,MAAMC,WAJxC;;AAAA;AAAA;AAIcC,mCAJd,iBAIsD,IAJtD;AAI4D;AACpD,4BAAIA,cAAcP,WAAlB,EAA+B;AAC3BQ,gCAAIC,KAAJ,CAAU,iBAAV;AACAC,8CAAkBL,KAAlB,EAAyBN,UAAzB,EAAqCE,MAArC;AACAG;AACH;;AATT;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAWII,4BAAIC,KAAJ,CAAUE,MAAMC,IAAN,CAAW,YAAX,EAAyBR,gBAAzB,EAA2C,SAA3C,CAAV;;AAXJ;AAAA,+BAa2BH,OAAOC,QAAP,CAAgB,EAAC,UAAU,UAAX,EAAhB,CAb3B;;AAAA;AAaUW,gCAbV;AAcQC,yCAdR,GAc4B,CAd5B;AAAA;AAAA;AAAA;AAAA;AAAA,qCAe0BD,QAf1B;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeeE,+BAff;AAAA;AAAA,+BAgBkCA,QAAQT,WAhB1C;;AAAA;AAAA;AAgBcC,mCAhBd,iBAgBwD,IAhBxD;AAgB8D;AACtD,4BAAIA,cAAcP,WAAlB,EAA+B;AAC3BQ,gCAAIC,KAAJ,CAAU,mBAAV;AACAO,gDAAoBD,OAApB,EAA6BhB,UAA7B,EAAyCE,MAAzC;AACAa;AACH;;AArBT;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAwBIN,4BAAIC,KAAJ,CAAUE,MAAMC,IAAN,CAAW,YAAX,EAAyBE,iBAAzB,EAA4C,UAA5C,CAAV;;AAxBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeG,Y;;;;;;wEA2Bf,kBAAiCC,UAAjC,EAA6CnB,UAA7C,EAAyDE,MAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AACUkB,6BADV,GACkBpB,WAAWqB,IAAX,CAAgB,UAACC,SAAD;AAAA,mCAAeA,UAAUC,IAAV,KAAmBJ,WAAWK,MAAX,CAAkBD,IAApD;AAAA,yBAAhB,CADlB;;AAEI,4BAAIH,KAAJ,EAAW;AACP,gCAAID,WAAWM,IAAX,CAAgBC,QAAhB,CAAyB,OAAzB,CAAJ,EAAuC;AACnCC,wCAAQR,UAAR,EAAoBjB,MAApB;AACH,6BAFD,MAEO,IAAIiB,WAAWM,IAAX,CAAgBC,QAAhB,CAAyB,OAAzB,CAAJ,EAAuC;AAC1CE,iDAAiBT,UAAjB,EAA6BjB,MAA7B;AACH,6BAFM,MAEA;AACHiB,2CAAWb,KAAX,CAAiB,wHAAjB;AACH;AACJ,yBARD,MAQO;AACHa,uCAAWU,MAAX,CAAkB,EAAC,UAAU,qBAAX,EAAlB;AACH;;AAZL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAelB,iB;;;;;;wEAef,kBAAgCQ,UAAhC,EAA4CjB,MAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAC0BA,OAAO4B,UAAP,CAAkBX,WAAWY,EAA7B,CAD1B;;AAAA;AACUC,+BADV;AAAA;AAAA,+BAEUA,QAAQC,KAAR,EAFV;;AAAA;AAAA,uCAG6B/B,MAH7B;AAAA,uCAGkDgC,iBAHlD;AAAA;AAAA,+BAG0EF,QAAQG,OAHlF;;AAAA;AAAA;AAAA;AAAA;AAAA,4CAGoCC,aAHpC;;AAAA;AAGUC,kCAHV;AAAA;AAAA,+BAIUA,WAAWJ,KAAX,EAJV;;AAAA;AAKIxB,4BAAIC,KAAJ,CAAUE,MAAMC,IAAN,CAAW,cAAX,CAAV,EAAsCwB,UAAtC;;AAEA5B,4BAAIC,KAAJ,CAAUE,MAAMC,IAAN,CAAW,wBAAX,CAAV,EAAgDwB,UAAhD;AAPJ;AAAA,+BAQ0BC,kBAAkBD,UAAlB,EAA8BnC,MAA9B,CAR1B;;AAAA;AAQUqC,+BARV;AAAA;AAAA,+BAS6BpB,WAAWb,KAAX,CAAiBiC,UAAU,wCAAV,GAAqD,wDAAtE,CAT7B;;AAAA;AASUC,kCATV;;AAUIA,mCAAWC,WAAX;;AAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeb,gB;;;;;;wEAaf,kBAAuBT,UAAvB,EAAmCjB,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAC0BA,OAAO4B,UAAP,CAAkBX,WAAWY,EAA7B,CAD1B;;AAAA;AACUC,+BADV;AAAA;AAAA,+BAEUA,QAAQC,KAAR,EAFV;;AAAA;AAAA,uCAG6B/B,MAH7B;AAAA,uCAGkDgC,iBAHlD;AAAA;AAAA,+BAG0EF,QAAQG,OAHlF;;AAAA;AAAA;AAAA;AAAA;AAAA,4CAGoCC,aAHpC;;AAAA;AAGUC,kCAHV;AAAA;AAAA,+BAIUA,WAAWJ,KAAX,EAJV;;AAAA;;AAMIxB,4BAAIC,KAAJ,CAAUE,MAAMC,IAAN,CAAW,wBAAX,CAAV,EAAgDwB,UAAhD;AANJ;AAAA,+BAO0BK,gBAAgBL,UAAhB,EAA4BnC,MAA5B,CAP1B;;AAAA;AAOUqC,+BAPV;AAAA;AAAA,+BAQ6BpB,WAAWb,KAAX,CAAiBiC,UAAU,mBAAV,GAAgC,wDAAjD,CAR7B;;AAAA;AAQUC,kCARV;;AASIA,mCAAWC,WAAX;;AATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAed,O;;;;;;wEAYf,kBAA+BU,UAA/B,EAA2CnC,MAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCACIO,GADJ;AAAA,uCACcG,MAAM+B,MAAN,CAAa,4CAAb,CADd;AAAA;AAAA,+BACgFN,WAAWb,MAAX,CAAkBD,IADlG;;AAAA;AAAA;AAAA,uCAC6HqB,IAD7H;AAAA;AAAA,+BACwIP,WAAW9B,WADnJ;;AAAA;AAAA;AAAA,sDACiK,IADjK;AAAA;;AAAA,qCACQG,KADR,gDACwG,eADxG;;AAAA;AAAA,+BAG+BmC,gBAAgBR,UAAhB,CAH/B;;AAAA;AAGUS,oCAHV;;AAAA,8BAIQA,gBAAgB,IAJxB;AAAA;AAAA;AAAA;;AAAA,uCAKQrC,GALR;AAAA;AAAA,+BAKgI4B,WAAWU,SAL3I;;AAAA;AAAA;AAAA,uCAKkB,qGALlB;;AAAA,qCAKYrC,KALZ;;AAAA,0DAMe,KANf;;AAAA;AAAA;AAAA,+BAS0CsC,mBAAmBF,aAAaG,KAAhC,CAT1C;;AAAA;AASUC,+CATV;;AAUIzC,4BAAIC,KAAJ,CAAU,gCAAV,EAA4CE,MAAMC,IAAN,CAAWiC,aAAaG,KAAxB,CAA5C,EAA4ErC,MAAM+B,MAAN,CAAaQ,KAAKC,SAAL,CAAeF,uBAAf,CAAb,CAA5E;;AAVJ,8BAWQA,2BAA2B,IAXnC;AAAA;AAAA;AAAA;;AAAA,0DAYe,IAZf;;AAAA;;AAeIzC,4BAAIC,KAAJ,CAAU,uCAAV,EAAmDwC,wBAAwBG,GAA3E;AAfJ;AAAA,+BAgBUC,sBAAsBJ,uBAAtB,CAhBV;;AAAA;AAAA,0DAiBW,IAjBX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeR,e;;;;;;wEAoBf,kBAAiCL,UAAjC,EAA6CnC,MAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCACIO,GADJ;AAAA,uCACcG,MAAM+B,MAAN,CAAa,4DAAb,CADd;AAAA;AAAA,+BACgGN,WAAWb,MAAX,CAAkBD,IADlH;;AAAA;AAAA;AAAA,uCAC6IqB,IAD7I;AAAA;AAAA,+BACwJP,WAAW9B,WADnK;;AAAA;AAAA;AAAA,sDACiL,IADjL;AAAA;;AAAA,qCACQG,KADR,gDACwH,eADxH;;AAAA;AAAA,+BAG+BmC,gBAAgBR,UAAhB,CAH/B;;AAAA;AAGUS,oCAHV;;AAAA,8BAIQA,gBAAgB,IAJxB;AAAA;AAAA;AAAA;;AAAA,uCAKQrC,GALR;AAAA;AAAA,+BAK8I4B,WAAWU,SALzJ;;AAAA;AAAA;AAAA,uCAKkB,mHALlB;;AAAA,qCAKYrC,KALZ;;AAAA,0DAMe,KANf;;AAAA;AAAA;AAAA,+BAS0CsC,mBAAmBF,aAAaG,KAAhC,CAT1C;;AAAA;AASUC,+CATV;;AAUIzC,4BAAIC,KAAJ,CAAU,gCAAV,EAA4CE,MAAMC,IAAN,CAAWiC,aAAaG,KAAxB,CAA5C,EAA4ErC,MAAM+B,MAAN,CAAaQ,KAAKC,SAAL,CAAeF,uBAAf,CAAb,CAA5E;;AAVJ,8BAWQA,2BAA2B,IAXnC;AAAA;AAAA;AAAA;;AAYQzC,4BAAI8C,IAAJ,CAAS,oCAAT,EAA+ClB,WAAWN,EAA1D;AAZR,0DAae,KAbf;;AAAA;;AAgBItB,4BAAIC,KAAJ,CAAU,sDAAV,EAAkEwC,wBAAwBG,GAA1F;AACAH,gDAAwBM,cAAxB,GAAyC,IAAzC;AAjBJ;AAAA,+BAkBUC,oBAAoBP,uBAApB,CAlBV;;AAAA;AAAA,0DAmBW,IAnBX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeZ,iB;;;;;;wEAuBf,kBAAmCnB,UAAnC,EAA+CnB,UAA/C,EAA2DE,MAA3D;AAAA;AAAA;AAAA;AAAA;AACIiB,mCAAWb,KAAX;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeW,mB;;;;;;;AA5Hf;AACAyC,QAAQ,QAAR,EAAkBC,MAAlB;AACA,IAAMC,SAASF,QAAQ,QAAR,CAAf;AACA,IAAMG,UAAUH,QAAQ,SAAR,CAAhB;AACA,IAAM9C,QAAQ8C,QAAQ,OAAR,CAAd;AACA,IAAMjD,MAAMiD,QAAQ,UAAR,CAAZ;AACAjD,IAAIqD,QAAJ,CAAaC,QAAQC,GAAR,CAAYC,SAAzB;;eAE0CP,QAAQ,kBAAR,C;IAAlCQ,Y,YAAAA,Y;IAAcrB,e,YAAAA,e;;gBACsEa,QAAQ,mBAAR,C;IAApFS,e,aAAAA,e;IAAiBnB,kB,aAAAA,kB;IAAoBS,mB,aAAAA,mB;IAAqBH,qB,aAAAA,qB;;AAElE;;;gBAC8BI,QAAQ,mBAAR,C;IAAtBxB,iB,aAAAA,iB;;AAqHRkC,OAAOC,OAAP,GAAiB;AACbnD,kBAAcA;AADD,CAAjB","file":"inbox_processor.js","sourcesContent":["export {}\r\n\r\n// standard modules\r\nrequire('dotenv').config();\r\nconst moment = require('moment');\r\nconst outdent = require('outdent');\r\nconst chalk = require('chalk');\r\nconst log = require('loglevel');\r\nlog.setLevel(process.env.LOG_LEVEL);\r\n\r\nconst { ImageDetails, getImageDetails } = require('./image_utils.js');\r\nconst { MagicSubmission, getMagicSubmission, saveMagicSubmission, deleteMagicSubmission } = require('./mongodb_data.js');\r\n\r\n// magic eye modules\r\nconst { sliceSubmissionId } = require('./reddit_utils.js');\r\n\r\nasync function processInbox(moderators, lastChecked, reddit) {\r\n    const replies = await reddit.getInbox({'filter': 'comments'});\r\n    let processedReplies = 0;\r\n    for (const reply of replies) {\r\n        const createdDate = await reply.created_utc * 1000; // reddit dates are in seconds\r\n        if (createdDate > lastChecked) {\r\n            log.debug('Procesing reply');\r\n            processInboxReply(reply, moderators, reddit);\r\n            processedReplies++;\r\n        }\r\n    }\r\n    log.debug(chalk.blue('Processed ', processedReplies, 'replies'));\r\n\r\n    const messages = await reddit.getInbox({'filter': 'messages'});\r\n    let processedMessages = 0;\r\n    for (const message of messages) {\r\n        const createdDate = await message.created_utc * 1000; // reddit dates are in seconds\r\n        if (createdDate > lastChecked) {\r\n            log.debug('Procesing message');\r\n            processInboxMessage(message, moderators, reddit);\r\n            processedMessages++;\r\n        }\r\n    }\r\n\r\n    log.debug(chalk.blue('Processed ', processedMessages, 'messages'));\r\n}\r\n\r\nasync function processInboxReply(inboxReply, moderators, reddit) {\r\n    const isMod = moderators.find((moderator) => moderator.name === inboxReply.author.name);\r\n    if (isMod) {\r\n        if (inboxReply.body.includes('clear')) {\r\n            doClear(inboxReply, reddit);\r\n        } else if (inboxReply.body.includes('wrong')) {\r\n            doExactMatchOnly(inboxReply, reddit);\r\n        } else {\r\n            inboxReply.reply(\"Not sure what that command is. You can use `clear` and I'll forget the submission, but that's all I support right now.\");\r\n        }\r\n    } else {\r\n        inboxReply.report({'reason': 'Moderator requested'});\r\n    }\r\n}\r\n\r\nasync function doExactMatchOnly(inboxReply, reddit) {\r\n    const comment = await reddit.getComment(inboxReply.id);\r\n    await comment.fetch();\r\n    const submission = await reddit.getSubmission(sliceSubmissionId(await comment.link_id));\r\n    await submission.fetch();\r\n    log.debug(chalk.blue('submission: '), submission);\r\n\r\n    log.debug(chalk.blue('Submission for clear: '), submission);\r\n    const success = await setExactMatchOnly(submission, reddit);\r\n    const magicReply = await inboxReply.reply(success ? \"Thanks, won't make that mistake again.\" : \"I couldn't do that that... image deleted or something?\");\r\n    magicReply.distinguish();\r\n}\r\n\r\nasync function doClear(inboxReply, reddit) {\r\n    const comment = await reddit.getComment(inboxReply.id);\r\n    await comment.fetch();\r\n    const submission = await reddit.getSubmission(sliceSubmissionId(await comment.link_id));\r\n    await submission.fetch();\r\n\r\n    log.debug(chalk.blue('Submission for clear: '), submission);\r\n    const success = await clearSubmission(submission, reddit);\r\n    const magicReply = await inboxReply.reply(success ? 'Thanks, all done.' : \"I couldn't do that that... image deleted or something?\");\r\n    magicReply.distinguish();\r\n}\r\n\r\nasync function clearSubmission(submission, reddit) {\r\n    log.debug(chalk.yellow('Starting process for clear submission by: '), await submission.author.name, ', submitted: ', new Date(await submission.created_utc * 1000));\r\n\r\n    const imageDetails = await getImageDetails(submission);\r\n    if (imageDetails == null){\r\n        log.debug(\"Could not download image for clear (probably deleted) - removing submission: https://www.reddit.com\" + await submission.permalink);\r\n        return false;\r\n    }\r\n\r\n    const existingMagicSubmission = await getMagicSubmission(imageDetails.dhash);\r\n    log.debug('Existing submission for dhash:', chalk.blue(imageDetails.dhash), chalk.yellow(JSON.stringify(existingMagicSubmission)));\r\n    if (existingMagicSubmission == null) {\r\n        return true; // already cleared\r\n    }\r\n\r\n    log.debug('Clearing magic submission for dhash: ', existingMagicSubmission._id);    \r\n    await deleteMagicSubmission(existingMagicSubmission);\r\n    return true; \r\n}\r\n\r\nasync function setExactMatchOnly(submission, reddit) {\r\n    log.debug(chalk.yellow('Starting process for setExactMatchOnly for submission by: '), await submission.author.name, ', submitted: ', new Date(await submission.created_utc * 1000));\r\n\r\n    const imageDetails = await getImageDetails(submission);\r\n    if (imageDetails == null){\r\n        log.debug(\"Could not download image for setting exact match (probably deleted) - removing submission: https://www.reddit.com\" + await submission.permalink);\r\n        return false;\r\n    }\r\n\r\n    const existingMagicSubmission = await getMagicSubmission(imageDetails.dhash);\r\n    log.debug('Existing submission for dhash:', chalk.blue(imageDetails.dhash), chalk.yellow(JSON.stringify(existingMagicSubmission)));\r\n    if (existingMagicSubmission == null) {\r\n        log.info(\"dhash not generated for submission\", submission.id);\r\n        return false;\r\n    }\r\n\r\n    log.debug('Setting exact match only for submission with dhash: ', existingMagicSubmission._id);\r\n    existingMagicSubmission.exactMatchOnly = true;\r\n    await saveMagicSubmission(existingMagicSubmission);\r\n    return true; \r\n}\r\n\r\n\r\nasync function processInboxMessage(inboxReply, moderators, reddit) {\r\n    inboxReply.reply(`I'm a bot so don't support private messages, but contact /u/CosmicKeys for details about how I work.`);\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    processInbox: processInbox,\r\n};"]}