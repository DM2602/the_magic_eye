{"version":3,"sources":["../src/mongodb_data.js"],"names":["cb","MongoClient","connect","process","env","MONGODB_URI","err","client","log","error","chalk","red","db","database","collection","magicPropertyName","findOne","lastChecked","undefined","yellow","save","MagicProperty","Date","getTime","info","blue","startTime","magicSubmissionName","magicCollection","ensureIndex","expireAfterSeconds","find","project","_id","map","x","toArray","database_cache","endTime","green","length","initDb","getSubmissionCollection","getPropertyCollection","submission","addToCache","Error","debug","JSON","stringify","push","saveMagicSubmission","inputDHash","isMatch","cachedHashKey","hammingDistance","HAMMING_THRESHOLD","canonicalHashKey","magicSubmission","exactMatchOnly","dhash","getMagicSubmission","submission_id","getMagicSubmissionById","remove","index","indexOf","splice","deleteMagicSubmission","setMagicProperty","setLastCheckedNow","value","getLastChecked","key","property","getMagicProperty","parseDbUrl","require","redis","promisify","config","setLevel","LOG_LEVEL","collectionPrefix","NODE_ENV","SUBREDDIT_NAME","name","MagicSubmission","redditSubmission","highestScore","reddit_id","id","duplicates","highest_score","module","exports"],"mappings":"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","file":"mongodb_data.js","sourcesContent":["var parseDbUrl = require(\"parse-database-url\");\r\nvar redis = require(\"redis\");\r\nconst { promisify } = require('util');\r\nrequire('dotenv').config();\r\nvar parseDbUrl = require(\"parse-database-url\");\r\nconst chalk = require('chalk');\r\nconst MongoClient = require('mongodb').MongoClient;\r\nconst hammingDistance = require(\"hamming\");\r\nconst log = require('loglevel');\r\nlog.setLevel(process.env.LOG_LEVEL);\r\n\r\nconst collectionPrefix = (process.env.NODE_ENV == 'production' ? '' : process.env.NODE_ENV + ':') + process.env.SUBREDDIT_NAME + ':';\r\nconst magicPropertyName = collectionPrefix + 'properties';\r\nclass MagicProperty {\r\n    _id;\r\n    value;\r\n\r\n    constructor(name, value) {\r\n        this._id = name;\r\n        this.value = value;\r\n    }\r\n}\r\n\r\nconst magicSubmissionName = collectionPrefix + 'submissions';\r\nclass MagicSubmission {\r\n    _id; // dhash of the original\r\n    reddit_id; // the last reddit id that matched the dhash (dhash within hamming distance)\r\n    duplicates; // array of reddit ids, includes removed and approved posts\r\n    exactMatchOnly; // boolean value\r\n    highest_score; // number\r\n\r\n    constructor(dhash, redditSubmission, highestScore) {\r\n        this._id = dhash;\r\n        this.reddit_id = redditSubmission.id;\r\n        this.duplicates = [];\r\n        this.exactMatchOnly = null;\r\n        this.highest_score = highestScore;\r\n    }\r\n}\r\n\r\nlet database = null; // access object\r\nlet database_cache = null; // entire database of dhashes in array\r\n\r\nasync function initDb(cb) {\r\n    try {\r\n        await MongoClient.connect(process.env.MONGODB_URI, async function (err, client) {\r\n            if (err) {\r\n              log.error(chalk.red('Fatal MongoDb connection error: '), err);\r\n              throw err;\r\n            }\r\n          \r\n            database = await client.db();\r\n\r\n            const lastChecked = await database.collection(magicPropertyName).findOne({'_id': 'last_checked'});\r\n            if (lastChecked == undefined) {\r\n                log.error(chalk.yellow('last_checked has never been set: assuming first time setup.'));\r\n                database.collection(magicPropertyName).save(new MagicProperty('last_checked', new Date().getTime()));\r\n            }\r\n\r\n            log.info(chalk.blue('Loading database cache...'));\r\n            const startTime = new Date().getTime();\r\n            const magicCollection = await database.collection(magicSubmissionName);\r\n            magicCollection.ensureIndex( { \"creationDate\": 1 }, { expireAfterSeconds: 60 * 60 * 24 * 365 * 5 } ); // expire after 5 years. \r\n            database_cache = await magicCollection.find().project({_id: 1}).map(x => x._id).toArray();\r\n            const endTime = new Date().getTime();\r\n            log.info(chalk.green('Database cache loaded, took: '), (endTime - startTime) / 1000, 's to load ', database_cache.length, 'entries');\r\n            //log.debug('Database database_cache: ', database_cache);\r\n\r\n            cb();\r\n          });                 \r\n    } catch (err) {\r\n        log.error(chalk.red('Fatal MongoDb connection error: '), err);\r\n        throw err;\r\n    }\r\n}\r\n\r\n\r\nasync function getSubmissionCollection() {\r\n    return database.collection(magicSubmissionName);\r\n}\r\n\r\nasync function getPropertyCollection() {\r\n    return database.collection(magicPropertyName);\r\n}\r\n\r\nasync function saveMagicSubmission(submission, addToCache) {\r\n    if (submission._id == null) {\r\n        throw new Error('Cannot create magic submission with null _id');\r\n    }\r\n    try {\r\n        log.debug(chalk.yellow(\"INSERTING submission:\" + JSON.stringify(submission)));\r\n        const collection = await getSubmissionCollection();\r\n        await collection.save(submission);\r\n        if (addToCache) {\r\n            database_cache.push(submission._id);\r\n        }\r\n    } catch (err) {\r\n        log.error(chalk.red('MongoDb error:'), err);\r\n    }\r\n}\r\n\r\nasync function getMagicSubmission(inputDHash) {\r\n    function isMatch(cachedHashKey) {\r\n        return hammingDistance(cachedHashKey, inputDHash) < process.env.HAMMING_THRESHOLD;\r\n    }\r\n    const canonicalHashKey = database_cache.find(isMatch);\r\n\r\n    if (canonicalHashKey == undefined) {\r\n        log.debug('No cache hit for hashKey:', inputDHash);\r\n        return null;\r\n    }\r\n\r\n    log.debug(chalk.blue('Cached hamming match, hamming distance is: ',  hammingDistance(canonicalHashKey, inputDHash)));\r\n    \r\n    try {\r\n        const collection = await getSubmissionCollection();\r\n        const magicSubmission = await collection.findOne({'_id' : canonicalHashKey});\r\n        chalk.yellow('hashKey:', canonicalHashKey, 'value:', JSON.stringify(magicSubmission));\r\n        chalk.yellow(magicSubmission);\r\n\r\n        if (magicSubmission.exactMatchOnly == true && magicSubmission.dhash != inputDHash) {\r\n            log.debug('cache hit, but ignoring because exactMatchOnly is set for image');\r\n            return null;\r\n        }\r\n\r\n        return magicSubmission;\r\n    } catch (err) {\r\n        log.error(chalk.red('MongoDb error:'), err);\r\n        return null;\r\n    }\r\n}\r\n\r\nasync function getMagicSubmissionById(submission_id) {\r\n    try {\r\n        const collection = await getSubmissionCollection();\r\n        return await collection.findOne({'reddit_id' : submission_id});\r\n    } catch (err) {\r\n        log.error(chalk.red('MongoDb error:'), err);\r\n        return null;\r\n    }\r\n}\r\n\r\nasync function deleteMagicSubmission(submission) {\r\n    try {\r\n        log.debug(chalk.yellow(\"DELETING:\" + submission));\r\n        const collection = await getSubmissionCollection();\r\n        await collection.remove({'_id': submission._id});\r\n\r\n        const index = database_cache.indexOf(submission._id);\r\n        if (index > -1) {\r\n            database_cache.splice(index, 1);\r\n        }\r\n    } catch (err) {\r\n        log.error(chalk.red('MongoDb error:'), err);\r\n    }\r\n}\r\n\r\nexport async function setLastCheckedNow() {\r\n    await setMagicProperty('last_checked', new Date().getTime());\r\n}\r\n\r\nexport async function getLastChecked() {\r\n    try {\r\n        const collection = await getPropertyCollection();\r\n        const lastChecked = (await collection.findOne({'_id': 'last_checked'}));\r\n        if (lastChecked != null) {\r\n            return lastChecked.value;\r\n        }\r\n    } catch (err) {\r\n        log.error(chalk.red('MongoDb error:'), err);\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\nexport async function setMagicProperty(key, value) {\r\n    try {\r\n        log.debug(chalk.yellow(\"inserting property. key:\"), key, chalk.yellow('value:'), value);\r\n        const collection = await getPropertyCollection();\r\n        await collection.save(new MagicProperty(key, value));\r\n    } catch (err) {\r\n        log.error(chalk.red('MongoDb error:'), err);\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\nexport async function getMagicProperty(key) {\r\n    try {\r\n        const collection = await getPropertyCollection();\r\n        const property = (await collection.findOne({'_id': key}));\r\n        if (property != null) {\r\n            return property.value;\r\n        }\r\n    } catch (err) {\r\n        log.error(chalk.red('MongoDb error:'), err);\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    MagicSubmission,\r\n    getMagicSubmission,\r\n    saveMagicSubmission,\r\n    deleteMagicSubmission,\r\n    getLastChecked,\r\n    setLastCheckedNow,\r\n    getMagicSubmissionById,\r\n    initDb,\r\n    setMagicProperty,\r\n    getMagicProperty,\r\n};"]}