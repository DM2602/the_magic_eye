{"version":3,"sources":["../src/server.js"],"names":["log","debug","chalk","blue","reddit","getSubreddit","process","env","SUBREDDIT_NAME","subreddit","getLastChecked","lastChecked","yellow","Date","getNew","submissions","getModerators","moderators","error","red","setTimeout","main","setLastCheckedNow","sort","a","b","created_utc","processNewSubmissions","processInbox","green","getMagicProperty","topPostsProcessed","subredditName","postAmount","alreadyProcessed","info","getTop","time","fetchAll","amount","topSubmissionsAll","processOldSubmissions","topSubmissionsYear","topSubmissionsMonth","topSubmissionsWeek","newSubmissions","setMagicProperty","firstTimeInit","app","listen","bgGreenBright","DEPLOY_TEST","startServer","babel","require","express","favicon","config","setLevel","LOG_LEVEL","use","snoowrap","initDb","generateDHash","isDuplicate","userAgent","clientId","CLIENT_ID","clientSecret","CLIENT_SECRET","refreshToken","REFRESH_TOKEN","get","req","res","DOWNLOAD_DIR","params","filename","dhash","send","dhash1","dhash2"],"mappings":"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","file":"server.js","sourcesContent":["// standard server modules\r\nconst babel = require(\"babel-core/register\");\r\nconst express = require('express');\r\nconst app = express();\r\nconst favicon = require('serve-favicon');\r\nconst chalk = require('chalk');\r\nrequire('dotenv').config();\r\n\r\nconst log = require('loglevel');\r\nlog.setLevel(process.env.LOG_LEVEL);\r\n\r\n\r\n// webpack middleware to serve react files\r\n// const webpack = require('webpack');\r\n// const webpackMiddleware = require('webpack-dev-middleware');\r\n// const webpackConfig = require('../webpack.config.js');\r\n// app.use(webpackMiddleware(webpack(webpackConfig), {noInfo: true, publicPath: '/'}));\r\napp.use(favicon('./src/img/favicon.ico'));\r\n\r\n// reddit modules\r\nconst snoowrap = require('snoowrap');\r\n\r\n// magic eye modules\r\nconst { getLastChecked, setLastCheckedNow, setMagicProperty, getMagicProperty, initDb } = require('./mongodb_data.js');\r\nconst { processOldSubmissions, processNewSubmissions, } = require('./submission_processor.js');\r\nconst { processInbox } = require('./inbox_processor.js');\r\nconst { generateDHash, isDuplicate } = require('./image_utils.js');\r\n\r\n\r\n// Create a new snoowrap requester with OAuth credentials\r\n// See here: https://github.com/not-an-aardvark/reddit-oauth-helper\r\nconst reddit = new snoowrap({\r\n    userAgent: 'THE_MAGIC_EYE:v1.0.0',\r\n    clientId: process.env.CLIENT_ID,\r\n    clientSecret: process.env.CLIENT_SECRET,\r\n    refreshToken: process.env.REFRESH_TOKEN\r\n  });\r\n  \r\nif (process.env.LOG_LEVEL == 'debug') {\r\n    reddit.config({debug: true})\r\n}\r\n\r\n\r\nasync function main() {\r\n    log.debug(chalk.blue(\"Starting Magic processing cycle\"));\r\n\r\n    // get everything up from to attempt to match checked time\r\n    const subreddit = await reddit.getSubreddit(process.env.SUBREDDIT_NAME);\r\n    const lastChecked = await getLastChecked();\r\n    log.debug('lastChecked: ', chalk.yellow(new Date(lastChecked)));\r\n\r\n    const submissions = await subreddit.getNew();\r\n    const moderators = await subreddit.getModerators();\r\n    \r\n    if (!submissions || !moderators) {\r\n        log.error(chalk.red('Cannot contact reddit - api is probably down for maintenance.'));\r\n        setTimeout(main, 30 * 1000); // run again in 30 seconds\r\n        return;\r\n    }\r\n\r\n    await setLastCheckedNow();\r\n\r\n    submissions.sort((a, b) => { return a.created_utc - b.created_utc});\r\n    await processNewSubmissions(submissions, lastChecked, reddit);\r\n    await processInbox(moderators, lastChecked, reddit);\r\n\r\n    log.debug(chalk.green('Finished processing, running again soon.'));\r\n    setTimeout(main, 30 * 1000); // run again in 30 seconds\r\n}\r\n\r\nasync function firstTimeInit() {\r\n    const topPostsProcessed = await getMagicProperty('top_posts_processed');\r\n    if (topPostsProcessed) {\r\n        return;\r\n    }\r\n\r\n    const subredditName = process.env.SUBREDDIT_NAME;\r\n    const postAmount = 1000; // not sure if required, but it's reddits current limit\r\n    const alreadyProcessed = [];\r\n    \r\n    log.info(chalk.blue('Beginning first time initialisation. Retrieving top posts...'));\r\n    const topSubmissionsAll = await reddit.getSubreddit(subredditName).getTop({time: 'all'}).fetchAll({amount: postAmount});\r\n    await processOldSubmissions(topSubmissionsAll, alreadyProcessed, 'all time top');\r\n\r\n    const topSubmissionsYear = await reddit.getSubreddit(subredditName).getTop({time: 'year'}).fetchAll({amount: postAmount});\r\n    await processOldSubmissions(topSubmissionsYear, alreadyProcessed, 'year top');\r\n\r\n    const topSubmissionsMonth = await reddit.getSubreddit(subredditName).getTop({time: 'month'}).fetchAll({amount: postAmount});\r\n    await processOldSubmissions(topSubmissionsMonth, alreadyProcessed, 'month top');\r\n\r\n    const topSubmissionsWeek = await reddit.getSubreddit(subredditName).getTop({time: 'week'}).fetchAll({amount: postAmount});\r\n    await processOldSubmissions(topSubmissionsWeek, alreadyProcessed, 'week top');\r\n\r\n    const newSubmissions = await reddit.getSubreddit(subredditName).getNew().fetchAll({amount: postAmount});\r\n    await setLastCheckedNow(); // set last checked as we've just processed the /new queue    \r\n    await processOldSubmissions(newSubmissions, alreadyProcessed, 'new');\r\n    \r\n    await setMagicProperty('top_posts_processed', true);\r\n    log.info(chalk.green('Initialisation processing complete.'));\r\n}\r\n\r\n\r\n// server\r\nasync function startServer() {   \r\n    try {\r\n        app.listen(3000, () => log.info(chalk.bgGreenBright('Magic Eye listening on port 3000')));\r\n\r\n        if (process.env.DEPLOY_TEST == 'false') {\r\n            await firstTimeInit();\r\n    \r\n            main();\r\n        }\r\n    } catch (e) {\r\n        log.error(chalk.red(e));\r\n    }\r\n}\r\ninitDb(startServer); // requires callback\r\n\r\n\r\n\r\n// ===================== temp helper functions =====================\r\napp.get('/dhash/:filename', async function(req, res) {\r\n    const dhash = await generateDHash(process.env.DOWNLOAD_DIR + req.params.filename);\r\n    res.send(\"dhash for image in download_dir is: \" + dhash);\r\n  });\r\n\r\napp.get('/hamming/:dhash1/:dhash2', async function(req, res) {\r\n    res.send(\"Id duplicate: \" + await isDuplicate(\r\n        process.env.DOWNLOAD_DIR + req.params.dhash1,\r\n        process.env.DOWNLOAD_DIR + req.params.dhash2));\r\n});\r\n\r\napp.get('/resetchecked', async function(req, res) {\r\n    setMagicProperty('last_checked', 1525079006000);\r\n    res.send('Done');\r\n});\r\n"]}