{"version":3,"sources":["../src/submission_processor.js"],"names":["submissions","alreadyProcessed","name","submissionsToProcess","filter","includes","submission","id","log","info","length","progressBar","cliProgress","Bar","Presets","shades_classic","start","processedCount","startTime","Date","getTime","processOldSubmission","update","push","endTime","stop","chalk","blue","processOldSubmissions","yellow","author","created_utc","debug","url","endsWith","permalink","getImageDetails","imageDetails","getMagicSubmission","dhash","existingMagicSubmission","JSON","stringify","processNewSubmission","lastChecked","reddit","submissionDate","green","processSubmission","processNewSubmissions","approved","removeAsBroken","isImageTooSmall","removeAsTooSmall","isImageUncropped","removeAsUncropped","processExistingSubmission","_id","getSubmission","reddit_id","lastSubmission","removed","lastSubmissionRemoved","highest_score","Math","max","score","duplicates","modComment","getModComment","isMagicIgnore","magicIgnore","saveMagicSubmission","isRepostOnlyByUserRemoval","lastIsRepostOnlyByUser","isRepostRemoval","lastIsRemovedAsRepost","isRecentRepost","isTopRepost","isRepost","doneRemove","sameUserForBothSubmissions","imageIsBlacklisted","approve","getRemovalReason","removalReason","red","removeAsBlacklisted","removeAsRepost","error","newMagicSubmission","MagicSubmission","currentSubmission","moment","currentDate","lastPosted","daysLimit","process","env","REPOST_DAYS","LARGE_SCORE","LARGE_SCORE_REPOST_DAYS","daysSincePosted","diff","remove","reply","replyable","distinguish","removePost","removalFooter","noOriginalSubmission","outdent","blacklistReason","require","config","setLevel","LOG_LEVEL","deleteMagicSubmission","sliceSubmissionId","height","width","trimmedHeight","highestScore","TOP_SCORE_THRESHOLD","SUBREDDIT_NAME","module","exports"],"mappings":"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","file":"submission_processor.js","sourcesContent":["// standard modules\r\nrequire('dotenv').config();\r\nconst moment = require('moment');\r\nconst outdent = require('outdent');\r\nconst chalk = require('chalk');\r\nconst log = require('loglevel');\r\nconst cliProgress = require('cli-progress');\r\nlog.setLevel(process.env.LOG_LEVEL);\r\n\r\n// magic eye modules\r\nconst { getImageDetails } = require('./image_utils.js');\r\nconst { MagicSubmission, getMagicSubmission, saveMagicSubmission, deleteMagicSubmission } = require('./mongodb_data.js');\r\nconst { getModComment, isRepostOnlyByUserRemoval, isRepostRemoval, getRemovalReason, sliceSubmissionId, isMagicIgnore, } = require('./reddit_utils.js');\r\n\r\n\r\nasync function processOldSubmissions(submissions, alreadyProcessed, name) {\r\n    const submissionsToProcess = submissions.filter(submission => !alreadyProcessed.includes(submission.id));\r\n    log.info('Retrived', submissions.length, name, 'posts.', submissionsToProcess.length, ' are new posts. Beginning processing.');\r\n    const progressBar = new cliProgress.Bar({}, cliProgress.Presets.shades_classic);\r\n    progressBar.start(submissionsToProcess.length, 0);\r\n    let processedCount = 0;\r\n\r\n    let startTime = new Date().getTime();\r\n    for (const submission of submissionsToProcess) {\r\n        await processOldSubmission(submission);\r\n        processedCount++;\r\n        progressBar.update(processedCount);\r\n        alreadyProcessed.push(submission.id);\r\n        }\r\n    let endTime = new Date().getTime();\r\n\r\n    progressBar.stop();\r\n    log.info(chalk.blue('Processed', processedCount, name, ' submissions.'),' Took: ', (endTime - startTime) / 1000, 's.');\r\n}\r\n\r\nasync function processOldSubmission(submission) {\r\n    log.debug(chalk.yellow('Starting process for old submission by: '), await submission.author.name, ', submitted: ', new Date(await submission.created_utc * 1000));\r\n    if (!await submission.url.endsWith('.jpg') && !await submission.url.endsWith('.png'))\r\n        {\r\n        log.debug(\"Image was not a jpg/png - ignoring submission: https://www.reddit.com\" + await submission.permalink);\r\n        return null;\r\n        }\r\n\r\n    const imageDetails = await getImageDetails(submission);\r\n    if (imageDetails == null){\r\n        log.debug(\"Could not download image (probably deleted) - submission: https://www.reddit.com\" + await submission.permalink);\r\n        return;\r\n    }\r\n\r\n    const existingMagicSubmission = await getMagicSubmission(imageDetails.dhash);\r\n    log.debug('Existing old submission for dhash:', chalk.blue(imageDetails.dhash), chalk.yellow(JSON.stringify(existingMagicSubmission)));\r\n    \r\n    if (existingMagicSubmission == null) {\r\n        await processNewSubmission(submission, imageDetails);\r\n    }\r\n}\r\n\r\n\r\n\r\nasync function processNewSubmissions(submissions, lastChecked, reddit) {\r\n    let processedCount = 0;\r\n    for (const submission of submissions) {\r\n        const submissionDate = await submission.created_utc * 1000; // reddit dates are in seconds\r\n        log.debug('submitted:', new Date(submissionDate), ', processing: ', submissionDate > lastChecked ? chalk.green(submissionDate > lastChecked) : chalk.yellow(submissionDate > lastChecked));\r\n        if (submissionDate > lastChecked) {\r\n            await processSubmission(submission, reddit);\r\n            processedCount++;\r\n            }\r\n        }\r\n\r\n    log.debug(chalk.blue('Processed ', processedCount, ' new submissions.'));\r\n}\r\n\r\nasync function processSubmission(submission, reddit) {\r\n    if (await submission.approved) {\r\n        log.debug(\"Submission is already approved, - ignoring submission: https://www.reddit.com\" + await submission.permalink);\r\n        return;\r\n    }\r\n\r\n    log.debug(chalk.yellow('Starting process for submission by: '), await submission.author.name, ', submitted: ', new Date(await submission.created_utc * 1000));\r\n    if (!await submission.url.endsWith('.jpg') && !await submission.url.endsWith('.png'))\r\n        {\r\n        log.debug(\"Image was not a jpg/png - ignoring submission: https://www.reddit.com\" + await submission.permalink);\r\n        return null;\r\n        }\r\n\r\n    const imageDetails = await getImageDetails(submission);\r\n    if (imageDetails == null){\r\n        log.debug(\"Could not download image (probably deleted) - removing submission: https://www.reddit.com\" + await submission.permalink);\r\n        removeAsBroken(reddit, submission);\r\n    }\r\n\r\n    if (isImageTooSmall(imageDetails)) {\r\n        log.debug(\"Image is too small, removing - removing submission: https://www.reddit.com\" + await submission.permalink);\r\n        removeAsTooSmall(reddit, submission);\r\n        return;\r\n    }\r\n\r\n    if (isImageUncropped(imageDetails)) {\r\n        log.debug(\"Image is uncropped, removing - removing submission: https://www.reddit.com\" + await submission.permalink);\r\n        removeAsUncropped(reddit, submission);\r\n        return;\r\n    }\r\n\r\n\r\n    const existingMagicSubmission = await getMagicSubmission(imageDetails.dhash);\r\n    log.debug('Existing submission for dhash:', chalk.blue(imageDetails.dhash), chalk.yellow(JSON.stringify(existingMagicSubmission)));\r\n    \r\n    if (existingMagicSubmission != null) {\r\n        await processExistingSubmission(submission, existingMagicSubmission, reddit);\r\n    } else {\r\n        await processNewSubmission(submission, imageDetails);\r\n    }\r\n\r\n}\r\n\r\n\r\nasync function processExistingSubmission(submission, existingMagicSubmission, reddit) {\r\n    log.debug(chalk.yellow('Found existing submission for dhash, matched: ' + existingMagicSubmission._id));\r\n    const lastSubmission = await reddit.getSubmission(existingMagicSubmission.reddit_id);\r\n    const lastSubmissionRemoved = await lastSubmission.removed;\r\n\r\n    existingMagicSubmission.highest_score = Math.max(existingMagicSubmission.highest_score, lastSubmission.score);\r\n    existingMagicSubmission.duplicates.push(submission.id);\r\n    \r\n    log.debug('Existing submission found.');\r\n    let modComment;\r\n    if (lastSubmissionRemoved) {\r\n        log.debug('Last submission removed, getting mod comment');\r\n        modComment = await getModComment(reddit, existingMagicSubmission.reddit_id);\r\n        const magicIgnore = await isMagicIgnore(modComment);\r\n        if (modComment == null || magicIgnore) {\r\n            log.info('Found repost of removed submission, but no relevant removal message exists. Ignoring submission: ', submission.id);\r\n            saveMagicSubmission(existingMagicSubmission);\r\n            return;\r\n        }\r\n    }\r\n\r\n    const lastIsRepostOnlyByUser = await isRepostOnlyByUserRemoval(modComment); // mod has told them to resubmit an altered/cropped version\r\n    const lastIsRemovedAsRepost = await isRepostRemoval(modComment); // We missed detecting a valid repost so a mod manually removed it. That image is reposted but we don't know the approved submission.\r\n    const isRepost = await isRecentRepost(submission, lastSubmission, existingMagicSubmission.highest_score) || isTopRepost(existingMagicSubmission.highest_score);\r\n    let doneRemove = false;\r\n    const sameUserForBothSubmissions = await lastSubmission.author.name == await submission.author.name;\r\n    const imageIsBlacklisted = lastSubmissionRemoved && !lastIsRemovedAsRepost;\r\n\r\n    if (lastIsRepostOnlyByUser && sameUserForBothSubmissions) {\r\n        log.info('Found matching hash for submission', submission.id, ', but approving as special user only repost.');\r\n        existingMagicSubmission.approve = true; // just auto-approve as this is almost certainly the needed action\r\n        submission.approve();\r\n    } else if (imageIsBlacklisted) {\r\n        const removalReason = await getRemovalReason(modComment);\r\n        if (removalReason == null) {\r\n            log.info(chalk.red(\"Ignoring submission because couldn't read the last removal message. Submission: \", submission.id, \", removal message thread: \", existingMagicSubmission.reddit_id));\r\n            return;\r\n        }\r\n        removeAsBlacklisted(reddit, submission, lastSubmission, removalReason);\r\n        doneRemove = true;\r\n    } else if (isRepost) {\r\n        removeAsRepost(reddit, submission, lastSubmission, lastIsRemovedAsRepost);\r\n        doneRemove = true;\r\n    } else if (!lastSubmissionRemoved) {\r\n        log.info('Found matching hash for submission ', submission.id, ', re-approving as it is over the repost limit.');\r\n        submission.approve();\r\n    }  else {\r\n        log.error('Could not process submission - old unnapproved link? Ignoring submission:', submission.id);\r\n    }\r\n\r\n    if (!doneRemove) {\r\n        existingMagicSubmission.reddit_id = await submission.id; // update the last/reference post\r\n    }\r\n\r\n    await saveMagicSubmission(existingMagicSubmission);\r\n}\r\n\r\nasync function processNewSubmission(submission, imageDetails) {\r\n    log.debug(chalk.green('Processing new submission: ' + submission.id));\r\n    const newMagicSubmission = new MagicSubmission(imageDetails.dhash, submission, submission.score);\r\n    await saveMagicSubmission(newMagicSubmission, true);\r\n}\r\n\r\n\r\nfunction isImageTooSmall(imageDetails) {\r\n    if (imageDetails.height == null || imageDetails.width == null) { return false; }\r\n\r\n    return (imageDetails.height * imageDetails.width) < (270 * 270); // https://i.imgur.com/xLRZOF5.png\r\n}\r\n\r\nfunction isImageUncropped(imageDetails) {\r\n    if (imageDetails.trimmedHeight == null || imageDetails.trimmedHeight == null) { return false; }\r\n\r\n    log.debug(chalk.blue('(imageDetails.trimmedHeight / imageDetails.height) < 0.75', (imageDetails.trimmedHeight / imageDetails.height)));\r\n    log.debug(chalk.blue('imageDetails.trimmedHeight', imageDetails.trimmedHeight));\r\n    log.debug(chalk.blue('imageDetails.height', imageDetails.height));\r\n    return (imageDetails.trimmedHeight / imageDetails.height) < 0.81; // https://i.imgur.com/tfDO06G.png\r\n}\r\n\r\nfunction isTopRepost(highestScore) {\r\n    return highestScore > +process.env.TOP_SCORE_THRESHOLD;\r\n}\r\n\r\nasync function isRecentRepost(currentSubmission, lastSubmission, highest_score) {\r\n    const currentDate = moment(await currentSubmission.created_utc * 1000);\r\n    const lastPosted = moment(await lastSubmission.created_utc * 1000);\r\n\r\n    let daysLimit = process.env.REPOST_DAYS;\r\n    const score = Math.max(await lastSubmission.score, highest_score);\r\n    if (score > +process.env.LARGE_SCORE) {\r\n        daysLimit = process.env.LARGE_SCORE_REPOST_DAYS;\r\n    }\r\n\r\n    const daysSincePosted = currentDate.diff(lastPosted, 'days');\r\n    \r\n    return daysSincePosted < daysLimit;\r\n}\r\n\r\nasync function removePost(reddit, submission, removalReason) {\r\n    submission.remove();\r\n    const replyable = await submission.reply(removalReason);\r\n    replyable.distinguish();\r\n}\r\n\r\n\r\n// ==================================== Removal messages =====================================\r\n\r\nconst removalFooter = \r\n    outdent`\r\n    \r\n\r\n    -----------------------\r\n\r\n    *I'm a bot so if I was wrong, reply to me and a moderator will check it. ([rules faq](https://www.reddit.com/r/${process.env.SUBREDDIT_NAME}/wiki/rules))*`;\r\n\r\nasync function removeAsBroken(reddit, submission){\r\n    const removalReason = \r\n        `It looks like your link is broken or deleted? I've removed it so you will need to fix it and resubmit.`;\r\n    removePost(reddit, submission, removalReason + removalFooter);\r\n}\r\n\r\nasync function removeAsUncropped(reddit, submission){\r\n    const removalReason = \r\n        `This image appears to be uncropped (i.e. black bars at the top and bottom). Black bars must be cropped out before posting (or post the original).`;\r\n    removePost(reddit, submission, removalReason + removalFooter);\r\n}\r\n\r\nasync function removeAsTooSmall(reddit, submission){\r\n    const removalReason = \r\n        `This image is too small (images must be larger than 270px*270px). Try drag the image into [google image search](https://www.google.com/imghp?sbi=1) and look for a bigger version.`;\r\n    removePost(reddit, submission, removalReason + removalFooter);\r\n}\r\n\r\n\r\nasync function removeAsRepost(reddit, submission, lastSubmission, noOriginalSubmission){\r\n    log.info('Found matching hash for submission: ', submission.id, ', removing as repost of:', await lastSubmission.id);\r\n\r\n    const permalink = 'https://www.reddit.com/' + await lastSubmission.permalink;\r\n    let removalReason = \r\n        `Good hmmm but unfortunately your post has been removed because it has been posted recently [here](${permalink}) by another user. ([direct link](${ await lastSubmission.url})).`;\r\n\r\n\r\n    if (noOriginalSubmission) {\r\n        removalReason += outdent`\r\n        \r\n\r\n        That submission image was also removed as a repost, but I couldn't programatically find the original.\r\n        `\r\n    }\r\n    removePost(reddit, submission, removalReason + removalFooter);\r\n}\r\n\r\nasync function removeAsBlacklisted(reddit, submission, lastSubmission, blacklistReason){\r\n    log.info('Removing ', submission.id, ', as blacklisted. Root blacklisted submission: ', await lastSubmission.id);\r\n\r\n    const permalink = 'https://www.reddit.com/' + await lastSubmission.permalink;\r\n    const removalReason = outdent\r\n        `Your post has been removed because it is a repost of [this image](${await lastSubmission.url}) posted [here](${permalink}), and that post was removed because:\r\n\r\n        ${blacklistReason}`;\r\n    removePost(reddit, submission, removalReason + removalFooter);\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    processOldSubmissions,\r\n    processNewSubmissions,\r\n};"]}