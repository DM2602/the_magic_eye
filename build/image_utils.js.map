{"version":3,"sources":["../src/image_utils.js"],"names":["imagePath","logUrl","dhashGet","log","warn","generateDHash","phashGet","generatePHash","submission","url","process","env","DOWNLOAD_DIR","options","dest","imageDownloader","image","filename","downloadImage","imageDetails","dhash","height","width","trimmedHeight","trimmedWidth","imagePHash","trimmedPath","promisify","imageMagick","convert","trimmedPHash","deleteImage","error","chalk","red","getImageDetails","imagePath1","imagePath2","dhash1","dhash2","hammingDistance","distance","isDuplicate","parseDbUrl","require","dhashLibrary","phashLibrary","get","fs","config","setLevel","LOG_LEVEL","unlink","e","module","exports"],"mappings":"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","file":"image_utils.js","sourcesContent":["var parseDbUrl = require(\"parse-database-url\");\r\nvar hammingDistance = require(\"hamming\");\r\nvar dhashLibrary = require(\"dhash\");\r\nvar phashLibrary = require(\"phash-imagemagick\");\r\nconst chalk = require('chalk');\r\nconst { promisify } = require('util');\r\nconst phashGet = promisify(phashLibrary.get);\r\nconst dhashGet = promisify(dhashLibrary);\r\nconst fs = require('fs');\r\nconst imageDownloader = require('image-downloader');\r\nconst imageMagick = require('imagemagick');\r\n\r\n// reddit modules\r\n\r\nrequire('dotenv').config();\r\nconst log = require('loglevel');\r\nlog.setLevel(process.env.LOG_LEVEL);\r\n\r\n\r\nexport async function generateDHash(imagePath, logUrl) {\r\n    try {\r\n        return await dhashGet(imagePath);\r\n    } catch (e) {\r\n        log.warn('Could not generate dhash for: ', logUrl, ', ', e);\r\n        return null;\r\n    }\r\n}\r\n\r\nexport async function generatePHash(imagePath, logUrl) {\r\n    try {\r\n        return await phashGet(imagePath);\r\n    } catch (e) {\r\n        log.warn('Could not generate phash for: ', logUrl, ', ', e);\r\n        return null;\r\n    }\r\n}\r\n\r\nexport async function downloadImage(submission) {\r\n    const options = {\r\n        url: await submission.url,\r\n        dest: process.env.DOWNLOAD_DIR\r\n      }\r\n\r\n    try {\r\n        const { filename, image } = await imageDownloader.image(options);\r\n        return filename;\r\n    } catch (e) {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport function deleteImage(imagePath) {\r\n    fs.unlink(imagePath, (e) => {\r\n        if (e) {\r\n            log.error(chalk.red('Failed to delete file: '), imagePath, e);\r\n        }\r\n    });\r\n}\r\n\r\nasync function getImageDetails(submission) {\r\n    const imagePath = await downloadImage(submission);\r\n    if (imagePath == null) {\r\n        return null;\r\n    }\r\n    const imageDetails = { dhash: null, height: null, width: null, trimmedHeight: null, trimmedWidth: null };\r\n    imageDetails.dhash = await generateDHash(imagePath, await submission.url);\r\n\r\n    if (imageDetails.dhash == null) {\r\n        return null; // must generate a dhash to be valid details\r\n    }\r\n\r\n    const imagePHash = await generatePHash(imagePath, await submission.url); \r\n    if (imagePHash != null) {\r\n        imageDetails.height = imagePHash.height; // there are better ways to get image dimensions but I already had phash working\r\n        imageDetails.width = imagePHash.width;\r\n    }\r\n\r\n    try {\r\n        const trimmedPath = imagePath + '_trimmed';\r\n        await promisify(imageMagick.convert)([imagePath, '-trim', trimmedPath]);\r\n        const trimmedPHash = await generatePHash(imagePath, await submission.url);\r\n        if (trimmedPHash != null) {\r\n            imageDetails.trimmedHeight = trimmedPHash.height;\r\n            imageDetails.trimmedWidth = trimmedPHash.width;\r\n        }\r\n        await deleteImage(trimmedPath);    \r\n    } catch (e) {\r\n        log.error(chalk.red('Could not trim submission:'), submission.url, ' - imagemagick error: ', e);\r\n    }\r\n\r\n    await deleteImage(imagePath);\r\n    return imageDetails;\r\n}\r\n\r\nexport async function isDuplicate(imagePath1, imagePath2) {\r\n    const dhash1 = await generateDHash(imagePath1, imagePath1);\r\n    const dhash2 = await generateDHash(imagePath2, imagePath2);\r\n    const distance = await hammingDistance(dhash1, dhash2); // hamming threshold\r\n    return [dhash1, dhash2, distance];\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    getImageDetails: getImageDetails,\r\n    isDuplicate: isDuplicate,\r\n};    \r\n"]}